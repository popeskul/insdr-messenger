// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ppopeskul/insider-messenger/internal/repository (interfaces: Repository,MessageRepository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_repository.go -package=mocks github.com/ppopeskul/insider-messenger/internal/repository Repository,MessageRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ppopeskul/insider-messenger/internal/models"
	repository "github.com/ppopeskul/insider-messenger/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Message mocks base method.
func (m *MockRepository) Message() repository.MessageRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(repository.MessageRepository)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockRepositoryMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockRepository)(nil).Message))
}

// Ping mocks base method.
func (m *MockRepository) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping))
}

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockMessageRepository) CreateMessage(phoneNumber, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", phoneNumber, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageRepositoryMockRecorder) CreateMessage(phoneNumber, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageRepository)(nil).CreateMessage), phoneNumber, content)
}

// GetSentMessages mocks base method.
func (m *MockMessageRepository) GetSentMessages(offset, limit int) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages", offset, limit)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockMessageRepositoryMockRecorder) GetSentMessages(offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*MockMessageRepository)(nil).GetSentMessages), offset, limit)
}

// GetTotalSentCount mocks base method.
func (m *MockMessageRepository) GetTotalSentCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSentCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSentCount indicates an expected call of GetTotalSentCount.
func (mr *MockMessageRepositoryMockRecorder) GetTotalSentCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSentCount", reflect.TypeOf((*MockMessageRepository)(nil).GetTotalSentCount))
}

// GetUnsentMessages mocks base method.
func (m *MockMessageRepository) GetUnsentMessages(limit int) ([]*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnsentMessages", limit)
	ret0, _ := ret[0].([]*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnsentMessages indicates an expected call of GetUnsentMessages.
func (mr *MockMessageRepositoryMockRecorder) GetUnsentMessages(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnsentMessages", reflect.TypeOf((*MockMessageRepository)(nil).GetUnsentMessages), limit)
}

// UpdateMessageStatus mocks base method.
func (m *MockMessageRepository) UpdateMessageStatus(id int64, status models.MessageStatus, messageID, errorMsg *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageStatus", id, status, messageID, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageStatus indicates an expected call of UpdateMessageStatus.
func (mr *MockMessageRepositoryMockRecorder) UpdateMessageStatus(id, status, messageID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageStatus", reflect.TypeOf((*MockMessageRepository)(nil).UpdateMessageStatus), id, status, messageID, errorMsg)
}
