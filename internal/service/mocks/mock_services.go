// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ppopeskul/insider-messenger/internal/service (interfaces: MessageService,SchedulerService,HealthService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_services.go -package=mocks github.com/ppopeskul/insider-messenger/internal/service MessageService,SchedulerService,HealthService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/ppopeskul/insider-messenger/internal/api"
	service "github.com/ppopeskul/insider-messenger/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
	isgomock struct{}
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// GetCircuitBreakerStatus mocks base method.
func (m *MockMessageService) GetCircuitBreakerStatus() (api.HealthResponseCircuitBreakerState, uint32, uint32) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerStatus")
	ret0, _ := ret[0].(api.HealthResponseCircuitBreakerState)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(uint32)
	return ret0, ret1, ret2
}

// GetCircuitBreakerStatus indicates an expected call of GetCircuitBreakerStatus.
func (mr *MockMessageServiceMockRecorder) GetCircuitBreakerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerStatus", reflect.TypeOf((*MockMessageService)(nil).GetCircuitBreakerStatus))
}

// GetSentMessages mocks base method.
func (m *MockMessageService) GetSentMessages(page, limit int) (*api.MessageListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSentMessages", page, limit)
	ret0, _ := ret[0].(*api.MessageListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSentMessages indicates an expected call of GetSentMessages.
func (mr *MockMessageServiceMockRecorder) GetSentMessages(page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSentMessages", reflect.TypeOf((*MockMessageService)(nil).GetSentMessages), page, limit)
}

// SendPendingMessages mocks base method.
func (m *MockMessageService) SendPendingMessages() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPendingMessages")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPendingMessages indicates an expected call of SendPendingMessages.
func (mr *MockMessageServiceMockRecorder) SendPendingMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPendingMessages", reflect.TypeOf((*MockMessageService)(nil).SendPendingMessages))
}

// MockSchedulerService is a mock of SchedulerService interface.
type MockSchedulerService struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServiceMockRecorder
	isgomock struct{}
}

// MockSchedulerServiceMockRecorder is the mock recorder for MockSchedulerService.
type MockSchedulerServiceMockRecorder struct {
	mock *MockSchedulerService
}

// NewMockSchedulerService creates a new mock instance.
func NewMockSchedulerService(ctrl *gomock.Controller) *MockSchedulerService {
	mock := &MockSchedulerService{ctrl: ctrl}
	mock.recorder = &MockSchedulerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerService) EXPECT() *MockSchedulerServiceMockRecorder {
	return m.recorder
}

// IsRunning mocks base method.
func (m *MockSchedulerService) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockSchedulerServiceMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockSchedulerService)(nil).IsRunning))
}

// Start mocks base method.
func (m *MockSchedulerService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSchedulerService)(nil).Start))
}

// Stop mocks base method.
func (m *MockSchedulerService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSchedulerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSchedulerService)(nil).Stop))
}

// MockHealthService is a mock of HealthService interface.
type MockHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServiceMockRecorder
	isgomock struct{}
}

// MockHealthServiceMockRecorder is the mock recorder for MockHealthService.
type MockHealthServiceMockRecorder struct {
	mock *MockHealthService
}

// NewMockHealthService creates a new mock instance.
func NewMockHealthService(ctrl *gomock.Controller) *MockHealthService {
	mock := &MockHealthService{ctrl: ctrl}
	mock.recorder = &MockHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthService) EXPECT() *MockHealthServiceMockRecorder {
	return m.recorder
}

// GetHealth mocks base method.
func (m *MockHealthService) GetHealth() *service.HealthStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealth")
	ret0, _ := ret[0].(*service.HealthStatus)
	return ret0
}

// GetHealth indicates an expected call of GetHealth.
func (mr *MockHealthServiceMockRecorder) GetHealth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealth", reflect.TypeOf((*MockHealthService)(nil).GetHealth))
}
